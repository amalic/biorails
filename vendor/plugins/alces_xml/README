AlcesXml
========

This provides a Model.from_xml option on all ActiveRecord in the system. Some configuration is needed to use this in the case
of complex object graphics with self references.

Function: Providing a matching pair of to_xml and from_xml method
Licence: GNU version 2 standard license

Example of customisation to add collections to xml on 

     def to_xml(options = {})
	      my_options = options.dup
	      my_options[:include] ||= [:parameters,:queues,:protocols]
	      Alces::XmlSerializer.new(self, my_options  ).to_s
	 end

	##
	# Get Study from xml
	# 
	 def self.from_xml(xml,options = {})
	      my_options = options.dup
	      my_options[:include] ||= [:parameters,:queues,:protocols]
	      Alces::XmlDeserializer.new(self,my_options ).to_object(xml)
	 end
	 
Example of controller code to deserialize

   Study.transaction do
      options = {:override=>{:project_id=>current_project.id,:name=>params[:name] },
                 :include=>[],:ignore=>[], :create  =>STUDY_MODELS }
           
      options[:include] << :parameters
      options[:include] << :queues if params[:study_queue] 
      options[:include] << :protocols if params[:study_protocol]
      
      @study = Study.from_xml(params[:file]||params['File'],options)  
      @study.project = current_project
      unless @study.save 
        flash[:error] = "Import Failed "
        return render( :action => 'import'  ) 
      end 
    end
	 