
<% content_for :sidemenu do -%>
  <%= render :partial =>'actions'  %>
<% end -%>

<% content_for :messages do -%>
<%= render :partial => 'shared/messages', :locals => { :objects => ['assay_protocol','process_flow']}  %>
<%end %>

<% content_for :help do -%>
  <%= render :partial =>'help'  %>
<% end -%>

<% content_for :status do -%>
<div id='protocol-tree'>    
</div>
<% end -%>

<% content_for :center do -%>
  <h1 class="icon icon-assay-large" style="text-indent:0.5em">
    Assay  [<%=link_to " #{@assay.name} ", assay_url( :action =>'show',:id =>@assay.id) %>] 
    Recipe [<strong><%=@assay_protocol.name %></strong>]
  </h1>
  
  <div id='tabs1'>
      <div id="tab-show" class="tab-content x-hidden">
         <%= render :partial => 'show' %>
      </div>
      <div id="tab-edit" class="tab-content x-hidden">
      </div>
      <div id="tab-schedule" class="tab-content x-hidden">
        <div id='schedule'>
         <%= render :partial => 'schedule' %>
       </div>
      </div>
      <div id="tab-graph" class="tab-content x-hidden">
      </div>
  </div>
  
  <hr />
<script type="text/javascript"> 

Ext.onReady(function(){
    
  var tabs = new Ext.TabPanel({
      renderTo:'tabs1',
              activeTab: <%=@tab%>,
              defaults: {
                              autoHeight: true,
                              autoWidth: true,
                              autoScroll: true,
                              bodyStyle: 'padding:15px'
              },
              items: [{
                              title: 'Overview',
                              contentEl: 'tab-show'
                      },{
                              title: 'Update',
                              contentEl: 'tab-edit',
                              listeners:{
                                  activate : function(panel){panel.getUpdater().refresh();}
                             },
                             autoLoad: "<%=workflow_url(:action=>'edit', :format=>:ext, :id=>@process_flow)%>"
                      },{
                              title: 'Layout (Schedule Steps)',
                              contentEl: 'tab-schedule'
                              
                      }]
          });

    // Define Tree.
    var tree_loader = new Ext.tree.TreeLoader({
            baseParams:{scope: 'root', process_flow_id: '<%=@process_flow.id%>'},
            dataUrl   :"<%=workflow_url(:action=>'tree',:id=>@process_flow) %>"
        });
        
    var protocol_tree = new Ext.tree.TreePanel({
        title            : 'Column Selector',
        collapsible      : false,
        animCollapse     : false,
        border           : true,
        id               : "protocol-tree",
        el               : "protocol-tree",
        autoScroll       : true,
        animate          : false,
        enableDD         : true,
        ddGroup : 'protocolDD',
        containerScroll  : true,
        height           : 400,
        loader           : tree_loader
    });
 
    protocol_tree.on("dblclick", function(node,event) {
        try{ 
           new Ajax.Request( "<%=workflow_url(:action=>'add',:id=>@process_flow) %>",
                    {asynchronous:true, evalScripts:true,
                     parameters: { node: node.attributes.id }});                          
        } catch (e) {
              console.log('Problem cannot add Protocol ');
              console.log(e);
        } 
        return true;  
        
    }, this);
        
    // SET the root node.
    var tree_root = new Ext.tree.AsyncTreeNode(
    {
        text		: 'Protocols',
        draggable	: false,
        iconCls         : 'icon-project',
        id		: 'root'
    });
 
    // Render the tree.
    protocol_tree.setRootNode(tree_root);
    protocol_tree.render();
    tree_root.expand();

   // Create drop zone
    var dropzone = new Ext.dd.DropTarget('schedule',{
      ddGroup : 'protocolDD',
      notifyDrop : function(proxy,event,data){
            try{ 
                 new Ajax.Request( "<%=workflow_url(:action=>'add',:id=>@process_flow) %>",
                          {asynchronous:true, evalScripts:true,
                           parameters: { node: data.node.attributes.id }});                          
              } catch (e) {
                    console.log('Problem cannot add Parameter ');
                    console.log(e);
              } 
        return true;  }});

 });

</script>

<% end %>
