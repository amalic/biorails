<%#
# _right.rhtml.rhtml
# 
# Created on 20-Sep-2007, 21:33:06
# 
# To change this template, choose Tools | Templates
# and open the template in the editor.
%>

<div id="right-accordion">
  <div id="panel-help" class='x-hidden'>
    <div>
      <div class="text-content">
      	 Data Formats define the rules for entry and display of data in the application. 
		 They use <i>Regular Expressions</i> and C style <i>Printf</i> code to do this. 
		 For the uninitiated these are in the are a little cryptic but they are well documented on the web. 
 	  </div>
    </div>
  </div>

  <div id="panel-meta" class='x-hidden'>
    <div>RegEx. Meta Characters </div>
    <div>
      <div class="text-content">
<table cellpadding="1" cellspacing="0" border="1" width="100%" style="FONT-SIZE:8pt">
	<tr bgcolor="#98c0f4"><td><b>MChar</b></td><td><b>Definition</b></td></tr>
	<tr><td>^</td><td>Start of a string.</td></tr>
	<tr><td>$</td><td>End of a string.</td></tr>

	<tr><td>.</td><td>Any character (except \n)</td></tr>
	<tr><td>|</td><td>Alternation.</td></tr>
	<tr><td>{...}</td><td>Explicit quantifier notation.</td></tr>
	<tr><td>[...]</td><td>Explicit set to match.</td></tr>
	<tr><td>(...)</td><td>Logical grouping of part of an expression.</td></tr>

	<tr><td>*</td><td>0 or more of previous expression.</td></tr>
	<tr><td>+</td><td>1 or more of previous expression.</td></tr>
	<tr><td>?</td><td>0 or 1 of previous expression. </td></tr>
	<tr><td>\</td><td>Preceding one of the above, it makes it a literal instead of a special character.</td></tr>
</table> 	  
     </div>
    </div>
  </div>

  <div id="panel-escapes" class='x-hidden'>
    <div>RegEx.Character Escapes </div>
    <div>
      <div class="text-content">
<table cellpadding="1" cellspacing="0" border="1"  width="100%" style="FONT-SIZE:8pt">
		<tr bgcolor="#98c0f4"><td><b>Escaped Char</b></td><td><b>Description</b></td></tr>

		<tr><td>ordinary characters</td><td>Characters other than . $ ^ { [ ( | ) ] } * + ? \ match themselves.</td></tr>
		<tr><td>\a</td><td>Matches a bell (alarm) \u0007.</td></tr>
		<tr><td>\b</td><td>Matches a backspace \u0008 if in a []; otherwise matches a word boundary (between \w and \W characters).</td></tr>
		<tr><td>\t</td><td>Matches a tab \u0009.</td></tr>
		<tr><td>\r</td><td>Matches a carriage return \u000D.</td></tr>

		<tr><td>\v</td><td>Matches a vertical tab \u000B.</td></tr>
		<tr><td>\f</td><td>Matches a form feed \u000C.</td></tr>
		<tr><td>\n</td><td>Matches a new line \u000A.</td></tr>
		<tr><td>\e</td><td>Matches an escape \u001B.</td></tr>
		<tr><td>\040</td><td>Matches an ASCII character as octal (up to three digits); numbers with no 
		leading zero are backreferences if they have only one digit or if they correspond to a capturing group number. 
		(For more information, see Backreferences.) For example, the character \040 represents a space.</td></tr>

		<tr>
    <td>\x20</td><td>Matches an ASCII character using hexadecimal representation (exactly two digits).</td></tr>
		<tr><td>\cC</td><td>Matches an ASCII control character; for example \cC is control-C.</td></tr>
		<tr><td>\u0020</td><td>Matches a Unicode character using a hexadecimal representation (exactly four digits).</td></tr>
		<tr><td>\*</td><td>When followed by a character that is not recognized as an escaped character, matches that character. For example, 
		<b>\*</b> is the same as <b>\x2A</b>.</td></tr>
</table>
 	  </div>
    </div>
  </div>

  <div id="panel-classes" class='x-hidden'>
    <div>RegEx. Character Classes</div>
    <div>
      <div class="text-content">
	<table cellpadding="1" cellspacing="0" border="1" bgcolor="#ffffff" bordercolor="#eeeeee" width="100%" style="FONT-SIZE:8pt">
		<tr bgcolor="#98c0f4"><td><b>Char Class</b></td><td><b>Description</b></td></tr>
		<tr><td>.</td><td>Matches any character except \n.</td></tr>

		<tr><td>[aeiou]</td><td>Matches any single character included in the specified set of characters.</td></tr>
		<tr><td>[^aeiou]</td><td>Matches any single character not in the specified set of characters.</td></tr>
		<tr><td>[0-9a-fA-F]</td><td>Use of a hyphen (â€“) allows specification of contiguous character ranges.</td></tr>
		<tr><td>\p{name}</td><td>Matches any character in the named character class specified by {name}..</td></tr>
		<tr><td>\P{name}</td><td>Matches text not included in groups and block ranges specified in {name}.</td></tr>
		<tr><td>\w</td><td>Matches any word character. equivalent to [a-zA-Z_0-9].</td></tr>
		<tr><td>\W</td><td>Matches any nonword character equivalent to [^a-zA-Z_0-9].</td></tr>
		<tr><td>\s</td><td>Matches any white-space character is equivalent to [ \f\n\r\t\v].</td></tr>
		<tr><td>\S</td><td>Matches any non-white-space character is equivalent to [^ \f\n\r\t\v].</td></tr>
		<tr><td>\d</td><td>Matches any decimal digit</td></tr>

		<tr><td>\D</td><td>Matches any nondigit</td></tr>
	</table>	 	  </div>
    </div>
  </div>

          	  
  <div id="panel-printf" class='x-hidden'>
    <div>Printf Cheat Sheet </div>
    <div>
      <div class="text-content">
		<table border="1" bgcolor="#ffffff" bordercolor="#eeeeee" style="FONT-SIZE:8pt">
			<tr bgcolor="#98c0f4"><td> Field </td><td>  Conversion</tr>
			 <tr><td>  b   </td><td> Convert argument as a binary number.</tr>
			 <tr><td>  c   </td><td> Argument is the numeric code for a single character.</tr>
			 <tr><td>  d   </td><td> Convert argument as a decimal number.</tr>
			 <tr><td>  E   </td><td> Equivalent to `e', but uses an uppercase E to indicate the exponent.</tr>
			 <tr><td>  e   </td><td> Convert floating point argument into exponential notation with one digit before the decimal point. 
			                         The precision determines the number of fractional digits (defaulting to six).</tr>
			 <tr><td>  f   </td><td> Convert floating point argument as [-]ddd.ddd, where the precision determines the number of digits after the decimal point.</tr>
			 <tr><td>  G   </td><td> Equivalent to `g', but use an uppercase `E' in exponent form.</tr>
			 <tr><td>  g   </td><td> Convert a floating point number using exponential form if the exponent is less than -4 or greater than or equal to the precision,
			                         or in d.dddd form otherwise.</tr>
			 <tr><td>  i   </td><td> Identical to `d'.</tr>
			 <tr><td>  o   </td><td> Convert argument as an octal number.</tr>
			 <tr><td>  p   </td><td> The valuing of argument.inspect.</tr>
			 <tr><td>  s   </td><td> Argument is a string to be substituted. If the format  sequence contains a precision, at most that many characters will be copied.</tr>
			 <tr><td>  u   </td><td> Treat argument as an unsigned decimal number.</tr>
			 <tr><td>  X   </td><td> Convert argument as a hexadecimal number using uppercase letters. Negative numbers will be displayed  with two leading periods 
			                         (representing an infinite string of leading 'FF's.</tr>
			 <tr><td>  x   </td><td> Convert argument as a hexadecimal number.   Negative numbers will be displayed with two leading periods 
			                         (representing an infinite string of leading 'ff's.</tr>   
			 <tr><td colspan=2>
			 Examples:<br/>
			   sprintf("%d %04x", 123, 123)               #=> "123 007b"<br/>
			   sprintf("%08b '%4s'", 123, 123)            #=> "01111011 ' 123'"<br/>
			   sprintf("%1$*2$s %2$d %1$s", "hello", 8)   #=> "   hello 8 hello"<br/>
			   sprintf("%1$*2$s %2$d", "hello", -8)       #=> "hello    -8"<br/>
			   sprintf("%+g:% g:%-g", 1.23, 1.23, 1.23)   #=> "+1.23: 1.23:1.23"<br/>
			 
			 </td></tr>                        
		  </table>
 		</div>
    </div>
  </div>
  
</div>

<script>
  Ext.onReady(function() {
  // create accordion
  var accordion = new Ext.Panel({
	  renderTo: "right-accordion",
	  layout:'accordion',
	  height: 500,
	  defaults: {
		  bodyStyle: 'padding:1px'
	  },
	  layoutConfig: {
		  titleCollapse: false,
		  animate: true
	  },
	  items: [{ title: 'Data Format', autoScroll:true,contentEl:'panel-help'},
			  { title: 'Meta Char',autoScroll:true, contentEl:'panel-meta'},
			  { title: 'Escapes',autoScroll:true, contentEl:'panel-escapes'},
			  { title: 'Classes',autoScroll:true, contentEl:'panel-classes'},
			  { title: 'PrintF',autoScroll:true, contentEl:'panel-printf' }]
	 });
});
</script>